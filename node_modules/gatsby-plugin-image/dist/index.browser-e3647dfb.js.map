{"version":3,"file":"index.browser-e3647dfb.js","sources":["../src/image-utils.ts","../src/components/hooks.ts","../src/components/layout-wrapper.tsx","../src/components/gatsby-image.browser.tsx","../src/components/picture.tsx","../src/components/placeholder.tsx","../src/components/main-image.tsx","../src/components/static-image.server.tsx","../src/components/static-image.tsx","../src/components/later-hydrator.tsx"],"sourcesContent":["/* eslint-disable no-unused-expressions */\nimport { stripIndent } from \"common-tags\"\nimport camelCase from \"camelcase\"\nimport { IGatsbyImageData } from \".\"\n\nconst DEFAULT_PIXEL_DENSITIES = [0.25, 0.5, 1, 2]\nexport const DEFAULT_BREAKPOINTS = [750, 1080, 1366, 1920]\nexport const EVERY_BREAKPOINT = [\n  320,\n  654,\n  768,\n  1024,\n  1366,\n  1600,\n  1920,\n  2048,\n  2560,\n  3440,\n  3840,\n  4096,\n]\nconst DEFAULT_FLUID_WIDTH = 800\nconst DEFAULT_FIXED_WIDTH = 800\nconst DEFAULT_ASPECT_RATIO = 4 / 3\n\nexport type Fit = \"cover\" | \"fill\" | \"inside\" | \"outside\" | \"contain\"\n\nexport type Layout = \"fixed\" | \"fullWidth\" | \"constrained\"\nexport type ImageFormat = \"jpg\" | \"png\" | \"webp\" | \"avif\" | \"auto\" | \"\"\n\n/**\n * The minimal required reporter, as we don't want to import it from gatsby-cli\n */\nexport interface IReporter {\n  warn(message: string): void\n}\n\nexport interface ISharpGatsbyImageArgs {\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  placeholder?: \"tracedSVG\" | \"dominantColor\" | \"blurred\" | \"none\"\n  tracedSVGOptions?: Record<string, unknown>\n  width?: number\n  height?: number\n  aspectRatio?: number\n  sizes?: string\n  quality?: number\n  transformOptions?: {\n    fit?: Fit\n    cropFocus?: number | string\n  }\n  jpgOptions?: Record<string, unknown>\n  pngOptions?: Record<string, unknown>\n  webpOptions?: Record<string, unknown>\n  avifOptions?: Record<string, unknown>\n  blurredOptions?: { width?: number; toFormat?: ImageFormat }\n  breakpoints?: Array<number>\n  backgroundColor?: string\n}\n\nexport interface IImageSizeArgs {\n  width?: number\n  height?: number\n  layout?: Layout\n  filename: string\n  outputPixelDensities?: Array<number>\n  breakpoints?: Array<number>\n  fit?: Fit\n  reporter?: IReporter\n  sourceMetadata: { width: number; height: number }\n}\n\nexport interface IImageSizes {\n  sizes: Array<number>\n  presentationWidth: number\n  presentationHeight: number\n  aspectRatio: number\n  unscaledWidth: number\n}\n\nexport interface IImage {\n  src: string\n  width: number\n  height: number\n  format: ImageFormat\n}\n\nexport interface IGatsbyImageHelperArgs {\n  pluginName: string\n  generateImageSource: (\n    filename: string,\n    width: number,\n    height: number,\n    format: ImageFormat,\n    fit?: Fit,\n    options?: Record<string, unknown>\n  ) => IImage\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  filename: string\n  placeholderURL?:\n    | ((args: IGatsbyImageHelperArgs) => string | undefined)\n    | string\n  width?: number\n  height?: number\n  sizes?: string\n  reporter?: IReporter\n  sourceMetadata?: { width: number; height: number; format: ImageFormat }\n  fit?: Fit\n  options?: Record<string, unknown>\n  breakpoints?: Array<number>\n  backgroundColor?: string\n  aspectRatio?: number\n}\n\nconst warn = (message: string): void => console.warn(message)\n\nconst sortNumeric = (a: number, b: number): number => a - b\n\nexport const getSizes = (width: number, layout: Layout): string | undefined => {\n  switch (layout) {\n    // If screen is wider than the max size, image width is the max size,\n    // otherwise it's the width of the screen\n    case `constrained`:\n      return `(min-width: ${width}px) ${width}px, 100vw`\n\n    // Image is always the same width, whatever the size of the screen\n    case `fixed`:\n      return `${width}px`\n\n    // Image is always the width of the screen\n    case `fullWidth`:\n      return `100vw`\n\n    default:\n      return undefined\n  }\n}\n\nexport const getSrcSet = (images: Array<IImage>): string =>\n  images.map(image => `${image.src} ${image.width}w`).join(`,\\n`)\n\nexport function formatFromFilename(filename: string): ImageFormat | undefined {\n  const dot = filename.lastIndexOf(`.`)\n  if (dot !== -1) {\n    const ext = filename.substr(dot + 1)\n    if (ext === `jpeg`) {\n      return `jpg`\n    }\n    if (ext.length === 3 || ext.length === 4) {\n      return ext as ImageFormat\n    }\n  }\n  return undefined\n}\n\nexport function setDefaultDimensions(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageHelperArgs {\n  let {\n    layout = `constrained`,\n    width,\n    height,\n    sourceMetadata,\n    breakpoints,\n    aspectRatio,\n    formats = [`auto`, `webp`],\n  } = args\n  formats = formats.map(format => format.toLowerCase() as ImageFormat)\n  layout = camelCase(layout) as Layout\n\n  if (width && height) {\n    return { ...args, formats, layout }\n  }\n  if (sourceMetadata.width && sourceMetadata.height && !aspectRatio) {\n    aspectRatio = sourceMetadata.width / sourceMetadata.height\n  }\n\n  if (layout === `fullWidth`) {\n    width = width || sourceMetadata.width || breakpoints[breakpoints.length - 1]\n    height = height || Math.round(width / (aspectRatio || DEFAULT_ASPECT_RATIO))\n  } else {\n    if (!width) {\n      if (height && aspectRatio) {\n        width = height * aspectRatio\n      } else if (sourceMetadata.width) {\n        width = sourceMetadata.width\n      } else if (height) {\n        width = Math.round(height / DEFAULT_ASPECT_RATIO)\n      } else {\n        width = DEFAULT_FIXED_WIDTH\n      }\n    }\n\n    if (aspectRatio && !height) {\n      height = Math.round(width / aspectRatio)\n    } else if (!aspectRatio) {\n      aspectRatio = width / height\n    }\n  }\n  return { ...args, width, height, aspectRatio, layout, formats }\n}\n\n/**\n * Use this for getting an image for the blurred placeholder. This ensures the\n * aspect ratio and crop match the main image\n */\nexport function getLowResolutionImageURL(\n  args: IGatsbyImageHelperArgs,\n  width = 20\n): string {\n  args = setDefaultDimensions(args)\n  const { generateImageSource, filename, aspectRatio } = args\n  return generateImageSource(\n    filename,\n    width,\n    Math.round(width / aspectRatio),\n    args.sourceMetadata.format || `jpg`,\n    args.fit,\n    args.options\n  )?.src\n}\n\nexport function generateImageData(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageData {\n  args = setDefaultDimensions(args)\n\n  let {\n    pluginName,\n    sourceMetadata,\n    generateImageSource,\n    layout,\n    fit,\n    options,\n    width,\n    height,\n    filename,\n    reporter = { warn },\n    backgroundColor,\n  } = args\n\n  if (!pluginName) {\n    reporter.warn(\n      `[gatsby-plugin-image] \"generateImageData\" was not passed a plugin name`\n    )\n  }\n\n  if (typeof generateImageSource !== `function`) {\n    throw new Error(`generateImageSource must be a function`)\n  }\n\n  if (!sourceMetadata || (!sourceMetadata.width && !sourceMetadata.height)) {\n    // No metadata means we let the CDN handle max size etc, aspect ratio etc\n    sourceMetadata = {\n      width,\n      height,\n      format: sourceMetadata?.format || formatFromFilename(filename) || `auto`,\n    }\n  } else if (!sourceMetadata.format) {\n    sourceMetadata.format = formatFromFilename(filename)\n  }\n\n  const formats = new Set<ImageFormat>(args.formats)\n\n  if (formats.size === 0 || formats.has(`auto`) || formats.has(``)) {\n    formats.delete(`auto`)\n    formats.delete(``)\n    formats.add(sourceMetadata.format)\n  }\n\n  if (formats.has(`jpg`) && formats.has(`png`)) {\n    reporter.warn(\n      `[${pluginName}] Specifying both 'jpg' and 'png' formats is not supported. Using 'auto' instead`\n    )\n    if (sourceMetadata.format === `jpg`) {\n      formats.delete(`png`)\n    } else {\n      formats.delete(`jpg`)\n    }\n  }\n\n  const imageSizes = calculateImageSizes({ ...args, sourceMetadata })\n\n  const result: IGatsbyImageData[\"images\"] = {\n    sources: [],\n  }\n\n  let sizes = args.sizes\n  if (!sizes) {\n    sizes = getSizes(imageSizes.presentationWidth, layout)\n  }\n\n  formats.forEach(format => {\n    const images = imageSizes.sizes\n      .map(size => {\n        const imageSrc = generateImageSource(\n          filename,\n          size,\n          Math.round(size / imageSizes.aspectRatio),\n          format,\n          fit,\n          options\n        )\n        if (\n          !imageSrc?.width ||\n          !imageSrc.height ||\n          !imageSrc.src ||\n          !imageSrc.format\n        ) {\n          reporter.warn(\n            `[${pluginName}] The resolver for image ${filename} returned an invalid value.`\n          )\n          return undefined\n        }\n        return imageSrc\n      })\n      .filter(Boolean)\n\n    if (format === `jpg` || format === `png` || format === `auto`) {\n      const unscaled =\n        images.find(img => img.width === imageSizes.unscaledWidth) || images[0]\n\n      if (unscaled) {\n        result.fallback = {\n          src: unscaled.src,\n          srcSet: getSrcSet(images),\n          sizes,\n        }\n      }\n    } else {\n      result.sources?.push({\n        srcSet: getSrcSet(images),\n        sizes,\n        type: `image/${format}`,\n      })\n    }\n  })\n\n  const imageProps: Partial<IGatsbyImageData> = {\n    images: result,\n    layout,\n    backgroundColor,\n  }\n  switch (layout) {\n    case `fixed`:\n      imageProps.width = imageSizes.presentationWidth\n      imageProps.height = imageSizes.presentationHeight\n      break\n\n    case `fullWidth`:\n      imageProps.width = 1\n      imageProps.height = 1 / imageSizes.aspectRatio\n      break\n\n    case `constrained`:\n      imageProps.width = args.width || imageSizes.presentationWidth || 1\n      imageProps.height = (imageProps.width || 1) / imageSizes.aspectRatio\n  }\n\n  return imageProps as IGatsbyImageData\n}\n\nconst dedupeAndSortDensities = (values: Array<number>): Array<number> =>\n  Array.from(new Set([1, ...values])).sort(sortNumeric)\n\nexport function calculateImageSizes(args: IImageSizeArgs): IImageSizes {\n  const {\n    width,\n    height,\n    filename,\n    layout = `constrained`,\n    sourceMetadata: imgDimensions,\n    reporter = { warn },\n    breakpoints = DEFAULT_BREAKPOINTS,\n  } = args\n\n  // check that all dimensions provided are positive\n  const userDimensions = { width, height }\n  const erroneousUserDimensions = Object.entries(userDimensions).filter(\n    ([_, size]) => typeof size === `number` && size < 1\n  )\n  if (erroneousUserDimensions.length) {\n    throw new Error(\n      `Specified dimensions for images must be positive numbers (> 0). Problem dimensions you have are ${erroneousUserDimensions\n        .map(dim => dim.join(`: `))\n        .join(`, `)}`\n    )\n  }\n\n  if (layout === `fixed`) {\n    return fixedImageSizes(args)\n  } else if (layout === `constrained`) {\n    return responsiveImageSizes(args)\n  } else if (layout === `fullWidth`) {\n    return responsiveImageSizes({ breakpoints, ...args })\n  } else {\n    reporter.warn(\n      `No valid layout was provided for the image at ${filename}. Valid image layouts are fixed, fullWidth, and constrained. Found ${layout}`\n    )\n    return {\n      sizes: [imgDimensions.width],\n      presentationWidth: imgDimensions.width,\n      presentationHeight: imgDimensions.height,\n      aspectRatio: imgDimensions.width / imgDimensions.height,\n      unscaledWidth: imgDimensions.width,\n    }\n  }\n}\nexport function fixedImageSizes({\n  filename,\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  reporter = { warn },\n}: IImageSizeArgs): IImageSizes {\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  if (!width) {\n    if (!height) {\n      width = DEFAULT_FIXED_WIDTH\n    } else {\n      width = Math.round(height * aspectRatio)\n    }\n  } else if (!height) {\n    height = Math.round(width / aspectRatio)\n  }\n\n  const originalWidth = width // will use this for presentationWidth, don't want to lose it\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n\n  // If the image is smaller than requested, warn the user that it's being processed as such\n  // print out this message with the necessary information before we overwrite it for sizing\n  if (isTopSizeOverriden) {\n    const fixedDimension = imgDimensions.width < width ? `width` : `height`\n    reporter.warn(stripIndent`\n    The requested ${fixedDimension} \"${\n      fixedDimension === `width` ? width : height\n    }px\" for the image ${filename} was larger than the actual image ${fixedDimension} of ${\n      imgDimensions[fixedDimension]\n    }px. If possible, replace the current image with a larger one.`)\n\n    if (fixedDimension === `width`) {\n      width = imgDimensions.width\n      height = Math.round(width / aspectRatio)\n    } else {\n      height = imgDimensions.height\n      width = height * aspectRatio\n    }\n  }\n\n  const sizes = densities\n    .filter(size => size >= 1) // remove smaller densities because fixed images don't need them\n    .map(density => Math.round(density * (width as number)))\n    .filter(size => size <= imgDimensions.width)\n\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function responsiveImageSizes({\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  breakpoints,\n  layout,\n}: IImageSizeArgs): IImageSizes {\n  let sizes\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  // Case 1: width of height were passed in, make sure it isn't larger than the actual image\n  width = width && Math.min(width, imgDimensions.width)\n  height = height && Math.min(height, imgDimensions.height)\n\n  // Case 2: neither width or height were passed in, use default size\n  if (!width && !height) {\n    width = Math.min(DEFAULT_FLUID_WIDTH, imgDimensions.width)\n    height = width / aspectRatio\n  }\n\n  // if it still hasn't been found, calculate width from the derived height.\n  // TS isn't smart enough to realise the type for height has been narrowed here\n  if (!width) {\n    width = (height as number) * aspectRatio\n  }\n\n  const originalWidth = width\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n  if (isTopSizeOverriden) {\n    width = imgDimensions.width\n    height = imgDimensions.height\n  }\n\n  width = Math.round(width)\n\n  if (breakpoints?.length > 0) {\n    sizes = breakpoints.filter(size => size <= imgDimensions.width)\n\n    // If a larger breakpoint has been filtered-out, add the actual image width instead\n    if (\n      sizes.length < breakpoints.length &&\n      !sizes.includes(imgDimensions.width)\n    ) {\n      sizes.push(imgDimensions.width)\n    }\n  } else {\n    sizes = densities.map(density => Math.round(density * (width as number)))\n    sizes = sizes.filter(size => size <= imgDimensions.width)\n  }\n\n  // ensure that the size passed in is included in the final output\n  if (layout === `constrained` && !sizes.includes(width)) {\n    sizes.push(width)\n  }\n  sizes = sizes.sort(sortNumeric)\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function getDimensionsAndAspectRatio(\n  dimensions,\n  options\n): { width: number; height: number; aspectRatio: number } {\n  // Calculate the eventual width/height of the image.\n  const imageAspectRatio = dimensions.width / dimensions.height\n\n  let width = options.width\n  let height = options.height\n\n  switch (options.fit) {\n    case `fill`: {\n      width = options.width ? options.width : dimensions.width\n      height = options.height ? options.height : dimensions.height\n      break\n    }\n    case `inside`: {\n      const widthOption = options.width\n        ? options.width\n        : Number.MAX_SAFE_INTEGER\n      const heightOption = options.height\n        ? options.height\n        : Number.MAX_SAFE_INTEGER\n\n      width = Math.min(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.min(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n    case `outside`: {\n      const widthOption = options.width ? options.width : 0\n      const heightOption = options.height ? options.height : 0\n\n      width = Math.max(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.max(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n\n    default: {\n      if (options.width && !options.height) {\n        width = options.width\n        height = Math.round(options.width / imageAspectRatio)\n      }\n\n      if (options.height && !options.width) {\n        width = Math.round(options.height * imageAspectRatio)\n        height = options.height\n      }\n    }\n  }\n\n  return {\n    width,\n    height,\n    aspectRatio: width / height,\n  }\n}\n","/* eslint-disable no-unused-expressions */\nimport {\n  useState,\n  CSSProperties,\n  useEffect,\n  HTMLAttributes,\n  ImgHTMLAttributes,\n  ReactEventHandler,\n  SetStateAction,\n  Dispatch,\n  RefObject,\n} from \"react\"\nimport { Node } from \"gatsby\"\nimport { PlaceholderProps } from \"./placeholder\"\nimport { MainImageProps } from \"./main-image\"\nimport type { IGatsbyImageData } from \"./gatsby-image.browser\"\nimport {\n  IGatsbyImageHelperArgs,\n  generateImageData,\n  Layout,\n  EVERY_BREAKPOINT,\n  IImage,\n  ImageFormat,\n} from \"../image-utils\"\nconst imageCache = new Set<string>()\n\n// Native lazy-loading support: https://addyosmani.com/blog/lazy-loading/\nexport const hasNativeLazyLoadSupport = (): boolean =>\n  typeof HTMLImageElement !== `undefined` &&\n  `loading` in HTMLImageElement.prototype\n\nexport function storeImageloaded(cacheKey?: string): void {\n  if (cacheKey) {\n    imageCache.add(cacheKey)\n  }\n}\n\nexport function hasImageLoaded(cacheKey: string): boolean {\n  return imageCache.has(cacheKey)\n}\nexport type IGatsbyImageDataParent<T = never> = T & {\n  gatsbyImageData: IGatsbyImageData\n}\nexport type FileNode = Node & {\n  childImageSharp?: IGatsbyImageDataParent<Node>\n}\n\nconst isGatsbyImageData = (\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageData | any\n): node is IGatsbyImageData =>\n  // 🦆 check for a deep prop to be sure this is a valid gatsbyImageData object\n  Boolean(node?.images?.fallback?.src)\n\nconst isGatsbyImageDataParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageDataParent<T> | any\n): node is IGatsbyImageDataParent<T> => Boolean(node?.gatsbyImageData)\n\ntype ImageDataLike = FileNode | IGatsbyImageDataParent | IGatsbyImageData\nexport const getImage = (node: ImageDataLike): IGatsbyImageData | undefined => {\n  if (isGatsbyImageData(node)) {\n    return node\n  }\n  if (isGatsbyImageDataParent(node)) {\n    return node.gatsbyImageData\n  }\n  return node?.childImageSharp?.gatsbyImageData\n}\n\nexport const getSrc = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.src\n\nexport const getSrcSet = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.srcSet\n\nexport function getWrapperProps(\n  width: number,\n  height: number,\n  layout: Layout\n): Pick<HTMLAttributes<HTMLElement>, \"className\" | \"style\"> & {\n  \"data-gatsby-image-wrapper\": string\n} {\n  const wrapperStyle: CSSProperties = {}\n\n  let className = `gatsby-image-wrapper`\n\n  // If the plugin isn't installed we need to apply the styles inline\n  if (!global.GATSBY___IMAGE) {\n    wrapperStyle.position = `relative`\n    wrapperStyle.overflow = `hidden`\n  }\n\n  if (layout === `fixed`) {\n    wrapperStyle.width = width\n    wrapperStyle.height = height\n  } else if (layout === `constrained`) {\n    if (!global.GATSBY___IMAGE) {\n      wrapperStyle.display = `inline-block`\n    }\n    className = `gatsby-image-wrapper gatsby-image-wrapper-constrained`\n  }\n\n  return {\n    className,\n    \"data-gatsby-image-wrapper\": ``,\n    style: wrapperStyle,\n  }\n}\n\nexport async function applyPolyfill(\n  ref: RefObject<HTMLImageElement>\n): Promise<void> {\n  if (!(`objectFitPolyfill` in window)) {\n    await import(\n      /* webpackChunkName: \"gatsby-plugin-image-objectfit-polyfill\" */ `objectFitPolyfill`\n    )\n  }\n  ;(window as any).objectFitPolyfill(ref.current)\n}\n\nexport interface IUrlBuilderArgs<OptionsType> {\n  width: number\n  height: number\n  baseUrl: string\n  format: ImageFormat\n  options: OptionsType\n}\nexport interface IGetImageDataArgs<OptionsType = Record<string, unknown>> {\n  baseUrl: string\n  /**\n   * For constrained and fixed images, the size of the image element\n   */\n  width?: number\n  height?: number\n  /**\n   * If available, pass the source image width and height\n   */\n  sourceWidth?: number\n  sourceHeight?: number\n  /**\n   * If only one dimension is passed, then this will be used to calculate the other.\n   */\n  aspectRatio?: number\n  layout?: Layout\n  /**\n   * Returns a URL based on the passed arguments. Should be a pure function\n   */\n  urlBuilder: (args: IUrlBuilderArgs<OptionsType>) => string\n\n  /**\n   * Should be a data URI\n   */\n  placeholderURL?: string\n  backgroundColor?: string\n  /**\n   * Used in error messages etc\n   */\n  pluginName?: string\n\n  /**\n   * If you do not support auto-format, pass an array of image types here\n   */\n  formats?: Array<ImageFormat>\n\n  breakpoints?: Array<number>\n\n  /**\n   * Passed to the urlBuilder function\n   */\n  options?: OptionsType\n}\n\n/**\n * Use this hook to generate gatsby-plugin-image data in the browser.\n */\nexport function getImageData<OptionsType>({\n  baseUrl,\n  urlBuilder,\n  sourceWidth,\n  sourceHeight,\n  pluginName = `useGatsbyImage`,\n  formats = [`auto`],\n  breakpoints = EVERY_BREAKPOINT,\n  options,\n  ...props\n}: IGetImageDataArgs<OptionsType>): IGatsbyImageData {\n  const generateImageSource = (\n    baseUrl: string,\n    width: number,\n    height?: number,\n    format?: ImageFormat\n  ): IImage => {\n    return {\n      width,\n      height,\n      format,\n      src: urlBuilder({ baseUrl, width, height, options, format }),\n    }\n  }\n\n  const sourceMetadata: IGatsbyImageHelperArgs[\"sourceMetadata\"] = {\n    width: sourceWidth,\n    height: sourceHeight,\n    format: `auto`,\n  }\n\n  const args: IGatsbyImageHelperArgs = {\n    ...props,\n    pluginName,\n    generateImageSource,\n    filename: baseUrl,\n    formats,\n    breakpoints,\n    sourceMetadata,\n  }\n  return generateImageData(args)\n}\n\nexport function getMainProps(\n  isLoading: boolean,\n  isLoaded: boolean,\n  images: IGatsbyImageData[\"images\"],\n  loading?: \"eager\" | \"lazy\",\n  toggleLoaded?: (loaded: boolean) => void,\n  cacheKey?: string,\n  ref?: RefObject<HTMLImageElement>,\n  style: CSSProperties = {}\n): Partial<MainImageProps> {\n  const onLoad: ReactEventHandler<HTMLImageElement> = function (e) {\n    if (isLoaded) {\n      return\n    }\n\n    storeImageloaded(cacheKey)\n\n    const target = e.currentTarget\n    const img = new Image()\n    img.src = target.currentSrc\n\n    if (img.decode) {\n      // Decode the image through javascript to support our transition\n      img\n        .decode()\n        .catch(() => {\n          // ignore error, we just go forward\n        })\n        .then(() => {\n          toggleLoaded(true)\n        })\n    } else {\n      toggleLoaded(true)\n    }\n  }\n\n  // Polyfill \"object-fit\" if unsupported (mostly IE)\n  if (ref?.current && !(`objectFit` in document.documentElement.style)) {\n    ref.current.dataset.objectFit = style.objectFit ?? `cover`\n    ref.current.dataset.objectPosition = `${style.objectPosition ?? `50% 50%`}`\n    applyPolyfill(ref)\n  }\n\n  // fallback when it's not configured in gatsby-config.\n  if (!global.GATSBY___IMAGE) {\n    style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      transform: `translateZ(0)`,\n      transition: `opacity 250ms linear`,\n      width: `100%`,\n      willChange: `opacity`,\n      ...style,\n    }\n  }\n\n  const result = {\n    ...images,\n    loading,\n    shouldLoad: isLoading,\n    \"data-main-image\": ``,\n    style: {\n      ...style,\n      opacity: isLoaded ? 1 : 0,\n    },\n    onLoad,\n    ref,\n  }\n\n  return result\n}\n\nexport type PlaceholderImageAttrs = ImgHTMLAttributes<HTMLImageElement> &\n  Pick<PlaceholderProps, \"sources\" | \"fallback\"> & {\n    \"data-placeholder-image\"?: string\n  }\n\nexport function getPlaceholderProps(\n  placeholder: PlaceholderImageAttrs | undefined,\n  isLoaded: boolean,\n  layout: Layout,\n  width?: number,\n  height?: number,\n  backgroundColor?: string\n): PlaceholderImageAttrs {\n  const wrapperStyle: CSSProperties = {}\n\n  if (backgroundColor) {\n    wrapperStyle.backgroundColor = backgroundColor\n\n    if (layout === `fixed`) {\n      wrapperStyle.width = width\n      wrapperStyle.height = height\n      wrapperStyle.backgroundColor = backgroundColor\n      wrapperStyle.position = `relative`\n    } else if (layout === `constrained`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    } else if (layout === `fullWidth`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    }\n  }\n\n  const result: PlaceholderImageAttrs = {\n    ...placeholder,\n    \"aria-hidden\": true,\n    \"data-placeholder-image\": ``,\n    style: {\n      opacity: isLoaded ? 0 : 1,\n      transition: `opacity 500ms linear`,\n      ...wrapperStyle,\n    },\n  }\n\n  // fallback when it's not configured in gatsby-config.\n  if (!global.GATSBY___IMAGE) {\n    result.style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      width: `100%`,\n    }\n  }\n\n  return result\n}\n\nexport function useImageLoaded(\n  cacheKey: string,\n  loading: \"lazy\" | \"eager\",\n  ref: any\n): {\n  isLoaded: boolean\n  isLoading: boolean\n  toggleLoaded: Dispatch<SetStateAction<boolean>>\n} {\n  const [isLoaded, toggleLoaded] = useState(false)\n  const [isLoading, toggleIsLoading] = useState(loading === `eager`)\n\n  const rAF =\n    typeof window !== `undefined` && `requestAnimationFrame` in window\n      ? requestAnimationFrame\n      : function (cb: TimerHandler): number {\n          return setTimeout(cb, 16)\n        }\n  const cRAF =\n    typeof window !== `undefined` && `cancelAnimationFrame` in window\n      ? cancelAnimationFrame\n      : clearTimeout\n\n  useEffect(() => {\n    let interval: number\n    // @see https://stackoverflow.com/questions/44074747/componentdidmount-called-before-ref-callback/50019873#50019873\n    function toggleIfRefExists(): void {\n      if (ref.current) {\n        if (loading === `eager` && ref.current.complete) {\n          storeImageloaded(cacheKey)\n          toggleLoaded(true)\n        } else {\n          toggleIsLoading(true)\n        }\n      } else {\n        interval = rAF(toggleIfRefExists)\n      }\n    }\n    toggleIfRefExists()\n\n    return (): void => {\n      cRAF(interval)\n    }\n  }, [])\n\n  return {\n    isLoading,\n    isLoaded,\n    toggleLoaded,\n  }\n}\n\nexport interface IArtDirectedImage {\n  media: string\n  image: IGatsbyImageData\n}\n\n/**\n * Generate a Gatsby image data object with multiple, art-directed images that display at different\n * resolutions.\n *\n * @param defaultImage The image displayed when no media query matches.\n * It is also used for all other settings applied to the image, such as width, height and layout.\n * You should pass a className to the component with media queries to adjust the size of the container,\n * as this cannot be adjusted automatically.\n * @param artDirected Array of objects which each contains a `media` string which is a media query\n * such as `(min-width: 320px)`, and the image object to use when that query matches.\n */\nexport function withArtDirection(\n  defaultImage: IGatsbyImageData,\n  artDirected: Array<IArtDirectedImage>\n): IGatsbyImageData {\n  const { images, placeholder, ...props } = defaultImage\n  const output: IGatsbyImageData = {\n    ...props,\n    images: {\n      ...images,\n      sources: [],\n    },\n    placeholder: placeholder && {\n      ...placeholder,\n      sources: [],\n    },\n  }\n\n  artDirected.forEach(({ media, image }) => {\n    if (!media) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(\n          \"[gatsby-plugin-image] All art-directed images passed to must have a value set for `media`. Skipping.\"\n        )\n      }\n      return\n    }\n\n    if (\n      image.layout !== defaultImage.layout &&\n      process.env.NODE_ENV === `development`\n    ) {\n      console.warn(\n        `[gatsby-plugin-image] Mismatched image layout: expected \"${defaultImage.layout}\" but received \"${image.layout}\". All art-directed images use the same layout as the default image`\n      )\n    }\n\n    output.images.sources.push(\n      ...image.images.sources.map(source => {\n        return { ...source, media }\n      }),\n      {\n        media,\n        srcSet: image.images.fallback.srcSet,\n      }\n    )\n\n    if (!output.placeholder) {\n      return\n    }\n\n    output.placeholder.sources.push({\n      media,\n      srcSet: image.placeholder.fallback,\n    })\n  })\n  output.images.sources.push(...images.sources)\n  if (placeholder?.sources) {\n    output.placeholder?.sources.push(...placeholder.sources)\n  }\n  return output\n}\n","// eslint-disable-next-line @typescript-eslint/triple-slash-reference\n/// <reference path=\"../global.d.ts\" />\n\nimport React, { Fragment, FunctionComponent, ReactElement } from \"react\"\nimport terserMacro from \"../../macros/terser.macro\"\nimport { Layout } from \"../image-utils\"\n\nexport interface ILayoutWrapperProps {\n  layout: Layout\n  width: number\n  height: number\n}\n\nconst NativeScriptLoading: FunctionComponent = () => (\n  <script\n    type=\"module\"\n    dangerouslySetInnerHTML={{\n      __html: terserMacro`\nconst hasNativeLazyLoadSupport = typeof HTMLImageElement !== \"undefined\" && \"loading\" in HTMLImageElement.prototype;\nif (hasNativeLazyLoadSupport) {\n  const gatsbyImages = document.querySelectorAll('img[data-main-image]');\n  for (let mainImage of gatsbyImages) {\n    if (mainImage.dataset.src) {\n      mainImage.setAttribute('src', mainImage.dataset.src)\n      mainImage.removeAttribute('data-src')\n    }\n    if (mainImage.dataset.srcset) {\n      mainImage.setAttribute('srcset', mainImage.dataset.srcset)\n      mainImage.removeAttribute('data-srcset')\n    }\n\n    if (mainImage.complete) {\n      mainImage.style.opacity = 1;\n    }\n  }\n}\n`,\n    }}\n  />\n)\n\nexport function getSizer(\n  layout: Layout,\n  width: number,\n  height: number\n): string {\n  let sizer: string | null = null\n  if (layout === `fullWidth`) {\n    sizer = `<div aria-hidden=\"true\" style=\"padding-top: ${\n      (height / width) * 100\n    }%;\"></div>`\n  }\n  if (layout === `constrained`) {\n    sizer = `<div style=\"max-width: ${width}px; display: block;\"><img alt=\"\" role=\"presentation\" aria-hidden=\"true\" src=\"data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E\" style=\"max-width: 100%; display: block; position: static;\"></div>`\n  }\n  return sizer\n}\n\nexport const LayoutWrapper: FunctionComponent<ILayoutWrapperProps> = function LayoutWrapper({\n  layout,\n  width,\n  height,\n  children,\n}) {\n  let sizer: ReactElement | null = null\n  if (layout === `fullWidth`) {\n    sizer = (\n      <div aria-hidden style={{ paddingTop: `${(height / width) * 100}%` }} />\n    )\n  }\n  if (layout === `constrained`) {\n    sizer = (\n      <div style={{ maxWidth: width, display: `block` }}>\n        <img\n          alt=\"\"\n          role=\"presentation\"\n          aria-hidden=\"true\"\n          src={`data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E`}\n          style={{\n            maxWidth: `100%`,\n            display: `block`,\n            position: `static`,\n          }}\n        />\n      </div>\n    )\n  }\n  return (\n    <Fragment>\n      {sizer}\n      {children}\n\n      {\n        // eslint-disable-next-line no-undef\n        SERVER && <NativeScriptLoading />\n      }\n    </Fragment>\n  )\n}\n","/* eslint-disable no-unused-expressions */\nimport React, {\n  ElementType,\n  useEffect,\n  useRef,\n  FunctionComponent,\n  ImgHTMLAttributes,\n  useState,\n  RefObject,\n  CSSProperties,\n} from \"react\"\nimport {\n  getWrapperProps,\n  hasNativeLazyLoadSupport,\n  storeImageloaded,\n} from \"./hooks\"\nimport { PlaceholderProps } from \"./placeholder\"\nimport { MainImageProps } from \"./main-image\"\nimport { Layout } from \"../image-utils\"\nimport { getSizer } from \"./layout-wrapper\"\n\n// eslint-disable-next-line @typescript-eslint/interface-name-prefix\nexport interface GatsbyImageProps\n  extends Omit<\n    ImgHTMLAttributes<HTMLImageElement>,\n    \"placeholder\" | \"onLoad\" | \"src\" | \"srcSet\" | \"width\" | \"height\"\n  > {\n  alt: string\n  as?: ElementType\n  className?: string\n  class?: string\n  imgClassName?: string\n  image: IGatsbyImageData\n  imgStyle?: CSSProperties\n  backgroundColor?: string\n  objectFit?: CSSProperties[\"objectFit\"]\n  objectPosition?: CSSProperties[\"objectPosition\"]\n  onLoad?: () => void\n  onError?: () => void\n  onStartLoad?: (props: { wasCached?: boolean }) => void\n}\n\nexport interface IGatsbyImageData {\n  layout: Layout\n  width: number\n  height: number\n  backgroundColor?: string\n  images: Pick<MainImageProps, \"sources\" | \"fallback\">\n  placeholder?: Pick<PlaceholderProps, \"sources\" | \"fallback\">\n}\n\nlet hasShownWarning = false\n\nexport const GatsbyImageHydrator: FunctionComponent<GatsbyImageProps> = function GatsbyImageHydrator({\n  as: Type = `div`,\n  style,\n  className,\n  class: preactClass,\n  onStartLoad,\n  image,\n  onLoad: customOnLoad,\n  backgroundColor,\n  loading = `lazy`,\n  ...props\n}) {\n  if (!image) {\n    if (process.env.NODE_ENV === `development`) {\n      console.warn(`[gatsby-plugin-image] Missing image prop`)\n    }\n    return null\n  }\n  if (preactClass) {\n    className = preactClass\n  }\n  const { width, height, layout, images } = image\n\n  const root = useRef<HTMLElement>()\n  const hydrated = useRef(false)\n  const unobserveRef = useRef<\n    ((element: RefObject<HTMLElement | undefined>) => void) | null\n  >(null)\n  const lazyHydrator = useRef<(() => void) | null>(null)\n  const ref = useRef<HTMLImageElement | undefined>()\n  const [isLoading, toggleIsLoading] = useState(hasNativeLazyLoadSupport())\n  const [isLoaded, toggleIsLoaded] = useState(false)\n\n  if (!global.GATSBY___IMAGE && !hasShownWarning) {\n    hasShownWarning = true\n    console.warn(\n      `[gatsby-plugin-image] You're missing out on some cool performance features. Please add \"gatsby-plugin-image\" to your gatsby-config.js`\n    )\n  }\n\n  const { style: wStyle, className: wClass, ...wrapperProps } = getWrapperProps(\n    width,\n    height,\n    layout\n  )\n\n  useEffect((): (() => void) | undefined => {\n    if (root.current) {\n      const hasSSRHtml = root.current.querySelector(\n        `[data-gatsby-image-ssr]`\n      ) as HTMLImageElement\n\n      // when SSR and native lazyload is supported we'll do nothing ;)\n      if (hasNativeLazyLoadSupport() && hasSSRHtml && global.GATSBY___IMAGE) {\n        onStartLoad?.({ wasCached: false })\n\n        if (hasSSRHtml.complete) {\n          customOnLoad?.()\n          storeImageloaded(JSON.stringify(images))\n        } else {\n          hasSSRHtml.addEventListener(`load`, function onLoad() {\n            hasSSRHtml.removeEventListener(`load`, onLoad)\n\n            customOnLoad?.()\n            storeImageloaded(JSON.stringify(images))\n          })\n        }\n        return undefined\n      }\n\n      // Fallback to custom lazy loading (intersection observer)\n      import(`./intersection-observer`).then(\n        ({ createIntersectionObserver }) => {\n          const intersectionObserver = createIntersectionObserver(() => {\n            if (root.current) {\n              onStartLoad?.({ wasCached: false })\n              toggleIsLoading(true)\n            }\n          })\n\n          if (root.current) {\n            unobserveRef.current = intersectionObserver(root)\n          }\n        }\n      )\n    }\n\n    return (): void => {\n      if (unobserveRef.current) {\n        unobserveRef.current(root)\n\n        // on unmount, make sure we cleanup\n        if (hydrated.current && lazyHydrator.current) {\n          lazyHydrator.current()\n        }\n      }\n    }\n  }, [])\n\n  useEffect(() => {\n    if (root.current) {\n      const hasSSRHtml = root.current.querySelector(`[data-gatsby-image-ssr]`)\n      // On first server hydration do nothing\n      if (hasNativeLazyLoadSupport() && hasSSRHtml && !hydrated.current) {\n        hydrated.current = true\n        return\n      }\n\n      import(`./lazy-hydrate`).then(({ lazyHydrate }) => {\n        lazyHydrator.current = lazyHydrate(\n          {\n            image,\n            isLoading,\n            isLoaded,\n            toggleIsLoaded: () => {\n              customOnLoad?.()\n              toggleIsLoaded(true)\n            },\n            ref,\n            loading,\n            ...props,\n          },\n          root,\n          hydrated\n        )\n      })\n    }\n  }, [\n    width,\n    height,\n    layout,\n    images,\n    isLoading,\n    isLoaded,\n    toggleIsLoaded,\n    ref,\n    props,\n  ])\n\n  const sizer = getSizer(layout, width, height)\n\n  return (\n    <Type\n      {...wrapperProps}\n      style={{\n        ...wStyle,\n        ...style,\n        backgroundColor,\n      }}\n      className={`${wClass}${className ? ` ${className}` : ``}`}\n      ref={root}\n      dangerouslySetInnerHTML={{\n        __html: sizer,\n      }}\n      suppressHydrationWarning\n    />\n  )\n}\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> = function GatsbyImage(\n  props\n) {\n  return <GatsbyImageHydrator {...props} />\n}\nGatsbyImage.displayName = `GatsbyImage`\n","/* eslint-disable filenames/match-regex */\nimport React, {\n  FunctionComponent,\n  ImgHTMLAttributes,\n  forwardRef,\n  LegacyRef,\n} from \"react\"\nimport * as PropTypes from \"prop-types\"\n\nexport interface IResponsiveImageProps {\n  sizes?: string\n  srcSet: string\n}\n\nexport type SourceProps = IResponsiveImageProps &\n  (\n    | {\n        media: string\n        type?: string\n      }\n    | {\n        media?: string\n        type: string\n      }\n  )\n\ntype FallbackProps = { src: string } & Partial<IResponsiveImageProps>\n\ntype ImageProps = ImgHTMLAttributes<HTMLImageElement> & {\n  src: string\n  alt: string\n  shouldLoad: boolean\n  innerRef: LegacyRef<HTMLImageElement>\n}\n\nexport type PictureProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: FallbackProps\n  sources?: Array<SourceProps>\n  alt: string\n  shouldLoad?: boolean\n}\n\nconst Image: FunctionComponent<ImageProps> = function Image({\n  src,\n  srcSet,\n  loading,\n  alt = ``,\n  shouldLoad,\n  innerRef,\n  ...props\n}) {\n  return (\n    <img\n      {...props}\n      decoding=\"async\"\n      loading={loading}\n      src={shouldLoad ? src : undefined}\n      data-src={!shouldLoad ? src : undefined}\n      srcSet={shouldLoad ? srcSet : undefined}\n      data-srcset={!shouldLoad ? srcSet : undefined}\n      alt={alt}\n      ref={innerRef}\n    />\n  )\n}\n\nexport const Picture = forwardRef<HTMLImageElement, PictureProps>(\n  function Picture(\n    { fallback, sources = [], shouldLoad = true, ...props },\n    ref\n  ) {\n    const sizes = props.sizes || fallback?.sizes\n    const fallbackImage = (\n      <Image\n        {...props}\n        {...fallback}\n        sizes={sizes}\n        shouldLoad={shouldLoad}\n        innerRef={ref}\n      />\n    )\n\n    if (!sources.length) {\n      return fallbackImage\n    }\n\n    return (\n      <picture>\n        {sources.map(({ media, srcSet, type }) => (\n          <source\n            key={`${media}-${type}-${srcSet}`}\n            type={type}\n            media={media}\n            srcSet={srcSet}\n            sizes={sizes}\n          />\n        ))}\n        {fallbackImage}\n      </picture>\n    )\n  }\n)\n\nImage.propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n  sizes: PropTypes.string,\n  srcSet: PropTypes.string,\n  shouldLoad: PropTypes.bool,\n}\n\nPicture.displayName = `Picture`\nPicture.propTypes = {\n  alt: PropTypes.string.isRequired,\n  shouldLoad: PropTypes.bool,\n  fallback: PropTypes.exact({\n    src: PropTypes.string.isRequired,\n    srcSet: PropTypes.string,\n    sizes: PropTypes.string,\n  }),\n  sources: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.exact({\n        media: PropTypes.string.isRequired,\n        type: PropTypes.string,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n      PropTypes.exact({\n        media: PropTypes.string,\n        type: PropTypes.string.isRequired,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n    ])\n  ),\n}\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\nimport { Picture, SourceProps } from \"./picture\"\n\nexport type PlaceholderProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: string\n  sources?: Array<SourceProps>\n}\n\nexport const Placeholder: FunctionComponent<PlaceholderProps> = function Placeholder({\n  fallback,\n  ...props\n}) {\n  if (fallback) {\n    return (\n      <Picture\n        {...props}\n        fallback={{\n          src: fallback,\n        }}\n        aria-hidden\n        alt=\"\"\n      />\n    )\n  } else {\n    return <div {...props}></div>\n  }\n}\n\nPlaceholder.displayName = `Placeholder`\nPlaceholder.propTypes = {\n  fallback: PropTypes.string,\n  sources: Picture.propTypes?.sources,\n  alt: function (props, propName, componentName): Error | null {\n    if (!props[propName]) {\n      return null\n    }\n    return new Error(\n      `Invalid prop \\`${propName}\\` supplied to \\`${componentName}\\`. Validation failed.`\n    )\n  },\n}\n","import React, { forwardRef } from \"react\"\nimport { Picture, PictureProps } from \"./picture\"\n\nexport type MainImageProps = PictureProps\n\nexport const MainImage = forwardRef<HTMLImageElement, MainImageProps>(\n  function MainImage(props, ref) {\n    return (\n      <>\n        <Picture ref={ref} {...props} />\n        <noscript>\n          <Picture {...props} shouldLoad={true} />\n        </noscript>\n      </>\n    )\n  }\n)\n\nMainImage.displayName = `MainImage`\nMainImage.propTypes = Picture.propTypes\n","import React, { FunctionComponent, ReactElement } from \"react\"\nimport { GatsbyImage as GatsbyImageServer } from \"./gatsby-image.server\"\nimport { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\nimport PropTypes from \"prop-types\"\nimport { ISharpGatsbyImageArgs } from \"../image-utils\"\n\nexport interface IStaticImageProps\n  extends Omit<GatsbyImageProps, \"image\">,\n    Omit<ISharpGatsbyImageArgs, \"backgroundColor\"> {\n  src: string\n}\n\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nexport function _getStaticImage(\n  GatsbyImage: FunctionComponent<GatsbyImageProps>\n): React.FC<IStaticImageProps & IPrivateProps> {\n  return function StaticImage({\n    src,\n    __imageData: imageData,\n    __error,\n    // We extract these because they're not meant to be passed-down to GatsbyImage\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    width,\n    height,\n    aspectRatio,\n    tracedSVGOptions,\n    placeholder,\n    formats,\n    quality,\n    transformOptions,\n    jpgOptions,\n    pngOptions,\n    webpOptions,\n    avifOptions,\n    blurredOptions,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    ...props\n  }): ReactElement {\n    if (__error) {\n      console.warn(__error)\n    }\n\n    if (imageData) {\n      return <GatsbyImage image={imageData} {...props} />\n    }\n    console.warn(`Image not loaded`, src)\n    if (!__error && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `Please ensure that \"gatsby-plugin-image\" is included in the plugins array in gatsby-config.js, and that your version of gatsby is at least 2.24.78`\n      )\n    }\n    return null\n  }\n}\n\nconst StaticImage: React.FC<\n  IStaticImageProps & IPrivateProps\n> = _getStaticImage(GatsbyImageServer)\n\nconst checkDimensionProps: PropTypes.Validator<number> = (\n  props: IStaticImageProps & IPrivateProps,\n  propName: keyof IStaticImageProps & IPrivateProps,\n  ...rest\n) => {\n  if (\n    props.layout === `fullWidth` &&\n    (propName === `width` || propName === `height`) &&\n    props[propName]\n  ) {\n    return new Error(\n      `\"${propName}\" ${props[propName]} may not be passed when layout is fullWidth.`\n    )\n  }\n  return PropTypes.number(props, propName, ...rest)\n}\n\nconst validLayouts = new Set([`fixed`, `fullWidth`, `constrained`])\n\nexport const propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n  width: checkDimensionProps,\n  height: checkDimensionProps,\n  sizes: PropTypes.string,\n  layout: (props: IStaticImageProps & IPrivateProps): Error | undefined => {\n    if (props.layout === undefined) {\n      return undefined\n    }\n    if (validLayouts.has(props.layout)) {\n      return undefined\n    }\n\n    return new Error(\n      `Invalid value ${props.layout}\" provided for prop \"layout\". Defaulting to \"constrained\". Valid values are \"fixed\", \"fullWidth\" or \"constrained\".`\n    )\n  },\n}\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","import {\n  GatsbyImage as GatsbyImageBrowser,\n  IGatsbyImageData,\n} from \"./gatsby-image.browser\"\nimport React from \"react\"\nimport {\n  _getStaticImage,\n  propTypes,\n  IStaticImageProps,\n} from \"./static-image.server\"\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nconst StaticImage: React.FC<\n  IStaticImageProps & IPrivateProps\n> = _getStaticImage(GatsbyImageBrowser)\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","import * as React from \"react\"\nexport function LaterHydrator({\n  children,\n}: React.PropsWithChildren<Record<string, unknown>>): React.ReactNode {\n  React.useEffect(() => {\n    // eslint-disable-next-line no-unused-expressions\n    import(`./lazy-hydrate`)\n  }, [])\n\n  return children\n}\n"],"names":["DEFAULT_PIXEL_DENSITIES","DEFAULT_BREAKPOINTS","EVERY_BREAKPOINT","warn","message","console","sortNumeric","a","b","getSrcSet","images","map","image","src","width","join","formatFromFilename","filename","dot","lastIndexOf","ext","substr","length","setDefaultDimensions","args","layout","height","sourceMetadata","breakpoints","aspectRatio","formats","format","toLowerCase","camelCase","Math","round","getLowResolutionImageURL","generateImageSource","fit","options","_generateImageSource","generateImageData","pluginName","reporter","backgroundColor","Error","Set","size","has","delete","add","imageSizes","imgDimensions","erroneousUserDimensions","Object","entries","filter","_","dim","outputPixelDensities","densities","dedupeAndSortDensities","calculated","getDimensionsAndAspectRatio","originalWidth","fixedDimension","stripIndent","sizes","density","presentationWidth","presentationHeight","unscaledWidth","fixedImageSizes","responsiveImageSizes","calculateImageSizes","result","sources","getSizes","forEach","imageSrc","Boolean","unscaled","find","img","fallback","srcSet","push","type","imageProps","values","Array","from","sort","min","includes","dimensions","imageAspectRatio","widthOption","Number","MAX_SAFE_INTEGER","heightOption","max","imageCache","hasNativeLazyLoadSupport","HTMLImageElement","prototype","storeImageloaded","cacheKey","hasImageLoaded","getImage","node","_node$images","_node$images$fallback","isGatsbyImageData","gatsbyImageData","isGatsbyImageDataParent","childImageSharp","_node$childImageSharp","getSrc","_getImage","_getImage$images","_getImage$images$fall","_getImage2","_getImage2$images","_getImage2$images$fal","getImageData","baseUrl","urlBuilder","sourceWidth","sourceHeight","getMainProps","isLoading","isLoaded","loading","toggleLoaded","ref","style","current","document","documentElement","dataset","objectFit","objectPosition","window","objectFitPolyfill","applyPolyfill","global","GATSBY___IMAGE","left","position","top","transform","transition","willChange","shouldLoad","data-main-image","opacity","onLoad","e","target","currentTarget","Image","currentSrc","decode","catch","then","getPlaceholderProps","placeholder","wrapperStyle","bottom","right","aria-hidden","data-placeholder-image","withArtDirection","defaultImage","artDirected","output","media","process","env","NODE_ENV","source","LayoutWrapper","children","sizer","React","paddingTop","maxWidth","display","alt","role","Fragment","hasShownWarning","GatsbyImageHydrator","as","Type","className","class","preactClass","onStartLoad","customOnLoad","props","root","useRef","hydrated","unobserveRef","lazyHydrator","toggleIsLoading","useState","toggleIsLoaded","overflow","data-gatsby-image-wrapper","getWrapperProps","wStyle","wClass","wrapperProps","useEffect","hasSSRHtml","querySelector","wasCached","complete","JSON","stringify","addEventListener","removeEventListener","import","createIntersectionObserver","intersectionObserver","lazyHydrate","getSizer","dangerouslySetInnerHTML","__html","suppressHydrationWarning","GatsbyImage","displayName","innerRef","decoding","undefined","Picture","forwardRef","fallbackImage","key","propTypes","PropTypes","isRequired","Placeholder","_Picture$propTypes","propName","componentName","MainImage","checkDimensionProps","rest","number","validLayouts","string","StaticImage","__imageData","imageData","__error","_getStaticImage","GatsbyImageBrowser","LaterHydrator"],"mappings":"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"}